/**
	* \file
	*		Sleepy node example
	* \authors
	*		Francesco Paolo Culcasi	<fpculcasi@gmail.com>
	*		Alessandro Martinelli	<a.martinelli1990@gmail.com>
	*		Nicola Messina		<nicola.messina93@gmail.com>
	*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "contiki.h"
#include "contiki-net.h"

#include "er-coap-engine.h"
#include "rest-engine.h"

#define DEBUG 1
#if DEBUG
#include <stdio.h>
	#define PRINTF(...) printf(__VA_ARGS__)
	#define PRINT6ADDR(addr) PRINTF("[%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x]", ((uint8_t *)addr)[0], ((uint8_t *)addr)[1], ((uint8_t *)addr)[2], ((uint8_t *)addr)[3], ((uint8_t *)addr)[4], ((uint8_t *)addr)[5], ((uint8_t *)addr)[6], ((uint8_t *)addr)[7], ((uint8_t *)addr)[8], ((uint8_t *)addr)[9], ((uint8_t *)addr)[10], ((uint8_t *)addr)[11], ((uint8_t *)addr)[12], ((uint8_t *)addr)[13], ((uint8_t *)addr)[14], ((uint8_t *)addr)[15])
	#define PRINTLLADDR(lladdr) PRINTF("[%02x:%02x:%02x:%02x:%02x:%02x]", (lladdr)->addr[0], (lladdr)->addr[1], (lladdr)->addr[2], (lladdr)->addr[3], (lladdr)->addr[4], (lladdr)->addr[5])
#else
	#define PRINTF(...)
	#define PRINT6ADDR(addr)
	#define PRINTLLADDR(addr)
#endif

/* FIXME: This server address is hard-coded for Cooja and link-local for unconnected border router. */
#define SERVER_NODE(ipaddr)	 uip_ip6addr(ipaddr, 0xaaaa, 0, 0, 0, 0x0212, 0x7401, 0x0001, 0x0101)			/* cooja2 */
/* #define SERVER_NODE(ipaddr)	 uip_ip6addr(ipaddr, 0xbbbb, 0, 0, 0, 0, 0, 0, 0x1) */

#define LOCAL_PORT			UIP_HTONS(COAP_DEFAULT_PORT + 1)
#define REMOTE_PORT		 UIP_HTONS(COAP_DEFAULT_PORT)

#define TOGGLE_INTERVAL 3

#define PROXY_DISCOVERY(){ \
	static coap_packet_t request[1]; \
	coap_init_message(request, COAP_TYPE_CON, COAP_GET, 0); \
	coap_set_header_uri_path(request, ".well-known/core"); \
	coap_set_header_uri_query(request, "rt=core.sp"); \
	const char msg[] = "Toggle!"; \
      	coap_set_payload(request, (uint8_t *)msg, sizeof(msg) - 1); \
	PRINTF("Sending request to "); \
	PRINT6ADDR(&server_ipaddr); \
	PRINTF(" : %u\n", UIP_HTONS(REMOTE_PORT)); \
	COAP_BLOCKING_REQUEST(&server_ipaddr, REMOTE_PORT, request, client_chunk_handler); \
}
 

PROCESS(sleepy_node, "Sleepy Node");
AUTOSTART_PROCESSES(&sleepy_node);

uip_ipaddr_t server_ipaddr;
static struct etimer et;

static void
set_global_address(void)
{
	uip_ipaddr_t ipaddr;
	int i;
	uint8_t state;

	uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
	uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
	uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);

	printf("IPv6 addresses: ");
	for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
		state = uip_ds6_if.addr_list[i].state;
		if(uip_ds6_if.addr_list[i].isused &&
			(state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
			PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
			printf("\n");
		}
	}
}

/* This function is will be passed to COAP_BLOCKING_REQUEST() to handle responses. */
void
client_chunk_handler(void *response){
	const uint8_t *chunk;
	int len = coap_get_payload(response, &chunk);
	printf("|%.*s", len, (char *)chunk);
}

PROCESS_THREAD(sleepy_node, ev, data)
{
	PROCESS_BEGIN();
	SERVER_NODE(&server_ipaddr);
	set_global_address();
	coap_init_engine();

	PROXY_DISCOVERY();

	etimer_set(&et, TOGGLE_INTERVAL * CLOCK_SECOND);
	while(1) {
	PROCESS_YIELD();

		if(etimer_expired(&et)) {
			printf("--Toggle timer--\n");

			PROXY_DISCOVERY();

			etimer_reset(&et);
		}
	
	}

	PROCESS_END();
}
